/* data_strct.h - Defines linked list node structure for macros */
#ifndef DATA_STRCT_H
#define DATA_STRCT_H

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Node structure for macro definitions */
typedef struct node {
    char *name;              /* Macro name */
    char *content;           /* Macro body */
    int line;                /* Line number of definition */
    struct node *next;       /* Pointer to next macro */
} node;

/* Creates a new macro node */
node *make_node(const char *name, const char *content, int line_num);

/* Adds a macro node to the end of the list */
void add_to_list(node **head, const char *name, const char *content, int line_num);

/* Frees the entire macro list */
void free_macro_list(node *head);

/* Searches the macro list for a given name */
node *search_list(node *head, const char *name, int *found);

#endif /* DATA_STRCT_H */

/* Implementation (should ideally go into data_strct.c, but included here for completeness) */

node *make_node(const char *name, const char *content, int line_num) {
    node *new_node = (node *)malloc(sizeof(node));
    if (!new_node) return NULL;

    new_node->name = strdup(name);
    new_node->content = strdup(content);
    new_node->line = line_num;
    new_node->next = NULL;
    return new_node;
}

void add_to_list(node **head, const char *name, const char *content, int line_num) {
    node *new_node = make_node(name, content, line_num);
    if (!new_node) return;

    if (*head == NULL) {
        *head = new_node;
    } else {
        node *temp = *head;
        while (temp->next) temp = temp->next;
        temp->next = new_node;
    }
}

void free_macro_list(node *head) {
    node *temp;
    while (head) {
        temp = head;
        head = head->next;
        free(temp->name);
        free(temp->content);
        free(temp);
    }
}

node *search_list(node *head, const char *name, int *found) {
    while (head) {
        if (strcmp(head->name, name) == 0) {
            *found = 1;
            return head;
        }
        head = head->next;
    }
    *found = 0;
    return NULL;
}
